postgres=# \dt
             List of relations
 Schema |       Name       | Type  | Owner 
--------+------------------+-------+-------
 public | accounts         | table | kumar
 public | audit_log        | table | kumar
 public | coffee_house     | table | kumar
 public | customers        | table | kumar
 public | departments      | table | kumar
 public | employees        | table | kumar
 public | inventory        | table | kumar
 public | logs             | table | kumar
 public | order_items      | table | kumar
 public | orders           | table | kumar
 public | pivoted_sales    | table | kumar
 public | products         | table | kumar
 public | sales            | table | kumar
 public | students         | table | kumar
 public | user_preferences | table | kumar
 public | users            | table | kumar
 public | warehouse_1      | table | kumar
 public | warehouse_2      | table | kumar
(18 rows)

postgres=# BEGIN;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
COMMIT; -- Both updates are saved permanently

BEGIN
UPDATE 1
UPDATE 1
COMMIT
postgres=# BEGIN;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
-- Something went wrong, undo everything
ROLLBACK; -- Both updates are undone

BEGIN
UPDATE 1
UPDATE 1
ROLLBACK
postgres=# -- Transfer $500 from account 1 to account 2
BEGIN;

-- Check if account 1 has sufficient balance
SELECT balance FROM accounts WHERE account_id = 1;

-- If sufficient, perform the transfer
UPDATE accounts SET balance = balance - 500 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 500 WHERE account_id = 2;

-- If everything is correct, commit
COMMIT;

-- If there was an error, we would ROLLBACK instead

BEGIN
 balance 
---------
 4900.00
(1 row)

UPDATE 1
UPDATE 1
COMMIT
postgres=# 
BEGIN;
INSERT INTO orders (customer_id, total) VALUES (1, 250.00);
INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 101, 2);
UPDATE inventory SET stock = stock - 2 WHERE product_id = 101;
-- If any of these fail, ALL are rolled back
COMMIT;

BEGIN
INSERT 0 1
ERROR:  insert or update on table "order_items" violates foreign key constraint "order_items_product_id_fkey"
DETAIL:  Key (product_id)=(101) is not present in table "products".
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
postgres=# -- This transaction maintains consistency by respecting foreign key constraints
BEGIN;
INSERT INTO customers (name, email) VALUES ('John Doe', 'john@email.com');
INSERT INTO orders (customer_id, total) VALUES (LASTVAL(), 100.00);
COMMIT;

BEGIN
ERROR:  duplicate key value violates unique constraint "customers_email_key"
DETAIL:  Key (email)=(john@email.com) already exists.
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
postgres=# 
BEGIN TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SELECT * FROM accounts; -- May see uncommitted changes
COMMIT;

BEGIN
 account_id |   account_name   | balance  
------------+------------------+----------
          3 | Business Account | 10000.00
          1 | Checking Account |  4400.00
          2 | Savings Account  |  2600.00
(3 rows)

COMMIT
postgres=# 
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
SELECT * FROM accounts WHERE balance > 1000;
-- Another transaction might modify data here
SELECT * FROM accounts WHERE balance > 1000; -- May return different results
COMMIT;

BEGIN
 account_id |   account_name   | balance  
------------+------------------+----------
          3 | Business Account | 10000.00
          1 | Checking Account |  4400.00
          2 | Savings Account  |  2600.00
(3 rows)

 account_id |   account_name   | balance  
------------+------------------+----------
          3 | Business Account | 10000.00
          1 | Checking Account |  4400.00
          2 | Savings Account  |  2600.00
(3 rows)

COMMIT
postgres=# 
BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SELECT * FROM accounts WHERE balance > 1000;
-- Even if other transactions modify data, this query will return same results
SELECT * FROM accounts WHERE balance > 1000;
COMMIT;

BEGIN
 account_id |   account_name   | balance  
------------+------------------+----------
          3 | Business Account | 10000.00
          1 | Checking Account |  4400.00
          2 | Savings Account  |  2600.00
(3 rows)

 account_id |   account_name   | balance  
------------+------------------+----------
          3 | Business Account | 10000.00
          1 | Checking Account |  4400.00
          2 | Savings Account  |  2600.00
(3 rows)

COMMIT
postgres=# 
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT * FROM accounts;
UPDATE accounts SET balance = balance * 1.05; -- 5% interest
COMMIT;

BEGIN
 account_id |   account_name   | balance  
------------+------------------+----------
          3 | Business Account | 10000.00
          1 | Checking Account |  4400.00
          2 | Savings Account  |  2600.00
(3 rows)

UPDATE 3
COMMIT
postgres=# SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;

WARNING:  SET TRANSACTION can only be used in transaction blocks
SET
postgres=# BEGIN;

INSERT INTO customers (name, email) VALUES ('Alice', 'alice@email.com');

SAVEPOINT after_customer_insert;

INSERT INTO orders (customer_id, total) VALUES (1, 500.00);

-- Something went wrong with the order, rollback to savepoint
ROLLBACK TO SAVEPOINT after_customer_insert;

-- Customer insert is still there, but order insert is undone
INSERT INTO orders (customer_id, total) VALUES (1, 300.00);

COMMIT; -- Only customer and the second order are committed

BEGIN
ERROR:  duplicate key value violates unique constraint "customers_email_key"
DETAIL:  Key (email)=(alice@email.com) already exists.
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  savepoint "after_customer_insert" does not exist
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
postgres=# BEGIN;

INSERT INTO products (name, price) VALUES ('Laptop', 999.99);
SAVEPOINT sp1;

INSERT INTO products (name, price) VALUES ('Mouse', 25.99);
SAVEPOINT sp2;

INSERT INTO products (name, price) VALUES ('Invalid Product', -50.00);
-- This violates business rules

ROLLBACK TO SAVEPOINT sp2; -- Removes invalid product insert
-- Laptop and Mouse inserts are still active

INSERT INTO products (name, price) VALUES ('Keyboard', 79.99);

COMMIT; -- Commits Laptop, Mouse, and Keyboard



BEGIN
INSERT 0 1
SAVEPOINT
INSERT 0 1
SAVEPOINT
ERROR:  new row for relation "products" violates check constraint "products_price_check"
DETAIL:  Failing row contains (7, Invalid Product, -50.00).
ROLLBACK
INSERT 0 1
COMMIT
postgres=# Releasing savepoints:
BEGIN;
INSERT INTO logs (message) VALUES ('Starting process');
SAVEPOINT process_start;

-- Do some work
INSERT INTO logs (message) VALUES ('Process completed');

-- If everything is OK, release the savepoint
RELEASE SAVEPOINT process_start;

COMMIT;

ERROR:  syntax error at or near "Releasing"
LINE 1: Releasing savepoints:
        ^
INSERT 0 1
ERROR:  SAVEPOINT can only be used in transaction blocks
INSERT 0 1
ERROR:  RELEASE SAVEPOINT can only be used in transaction blocks
WARNING:  there is no transaction in progress
COMMIT
postgres=# -- Good: Short, focused transaction
BEGIN;
UPDATE inventory SET stock = stock - 1 WHERE product_id = 101;
INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 101, 1);
COMMIT;

-- Avoid: Long-running transactions that lock resources

BEGIN
UPDATE 0
ERROR:  insert or update on table "order_items" violates foreign key constraint "order_items_product_id_fkey"
DETAIL:  Key (product_id)=(101) is not present in table "products".
ROLLBACK
postgres=# BEGIN;
DO $$
DECLARE
    insufficient_funds EXCEPTION;
    current_balance DECIMAL;
BEGIN
    SELECT balance INTO current_balance FROM accounts WHERE account_id = 1;
    
    IF current_balance < 100 THEN
        RAISE insufficient_funds;
    END IF;
    
    UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
    UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
    
EXCEPTION
    WHEN insufficient_funds THEN
        RAISE NOTICE 'Transaction failed: Insufficient funds';
        ROLLBACK;
END $$;

BEGIN
ERROR:  type "exception" does not exist
LINE 3:     insufficient_funds EXCEPTION;
                               ^
postgres=!# BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
-- Critical financial operations here
COMMIT;

-- For reporting, READ COMMITTED is usually sufficient
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
-- Generate reports here
COMMIT;

ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
BEGIN
COMMIT
postgres=# BEGIN;

-- Main operation
INSERT INTO orders (customer_id, total) VALUES (1, 1000.00);

SAVEPOINT before_items;

-- Add items (might fail for some items)
INSERT INTO order_items (order_id, product_id, quantity) 
VALUES (currval('orders_id_seq'), 101, 2);

-- If this fails, rollback to savepoint and continue
INSERT INTO order_items (order_id, product_id, quantity) 
VALUES (currval('orders_id_seq'), 102, 1);

COMMIT;

BEGIN
INSERT 0 1
SAVEPOINT
ERROR:  relation "orders_id_seq" does not exist
LINE 2: VALUES (currval('orders_id_seq'), 101, 2);
                        ^
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
postgres=# -- Check for blocking transactions
SELECT 
    blocked_locks.pid AS blocked_pid,
    blocked_activity.usename AS blocked_user,
    blocking_locks.pid AS blocking_pid,
    blocking_activity.usename AS blocking_user,
    blocked_activity.query AS blocked_statement
FROM pg_catalog.pg_locks blocked_locks
JOIN pg_catalog.pg_stat_activity blocked_activity 
    ON blocked_activity.pid = blocked_locks.pid
JOIN pg_catalog.pg_locks blocking_locks 
    ON blocking_locks.locktype = blocked_locks.locktype
WHERE NOT blocked_locks.granted;



ERROR:  missing FROM-clause entry for table "blocking_activity"
LINE 5:     blocking_activity.usename AS blocking_user,
            ^
postgres=# -- Good: Explicit transaction control
BEGIN;
INSERT INTO audit_log (action, timestamp) VALUES ('user_creation', NOW());
INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
INSERT INTO user_preferences (user_id, theme) VALUES (currval('users_id_seq'), 'dark');
COMMIT;

-- Avoid: Relying on autocommit for related operations
INSERT INTO audit_log (action, timestamp) VALUES ('user_creation', NOW());
-- If this fails, the audit log entry above is already committed
INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');




BEGIN
INSERT 0 1
ERROR:  duplicate key value violates unique constraint "users_email_key"
DETAIL:  Key (email)=(john@example.com) already exists.
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
INSERT 0 1
ERROR:  duplicate key value violates unique constraint "users_email_key"
DETAIL:  Key (email)=(john@example.com) already exists.