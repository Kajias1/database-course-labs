postgres=# CREATE TABLE departments (
postgres(# dept_id SERIAL PRIMARY KEY,
postgres(# dept_name VARCHAR(100) NOT NULL,
postgres(# location VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# dept_id INTEGER REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# dept_id INTEGER,
postgres(# FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR (50) NOT NULL,
postgres(# dept_it INTEGER
postgres(# );
CREATE TABLE
postgres=# ALTER TABLE employees
postgres-# ADD CONSTRAINT fk_employee_department
postgres-# FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
postgres-# ;
ERROR:  column "dept_id" referenced in foreign key constraint does not exist
postgres=# ALTER TABLE employees
postgres-# RENAME COLUMN dept_it TO dept_id;
ALTER TABLE
postgres=# ALTER TABLE employees
ADD CONSTRAINT fk_employee_department
FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
;
ALTER TABLE
postgres=# INSERT INTO departments (dept_name, location) VALUES
postgres-# ('Engineering', 'Building A'),
postgres-# ('Marketing', 'Building B'),
postgres-# ('HR', 'Building C');
INSERT 0 3
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
postgres-# ('John', 'Smith', 1);
INSERT 0 1
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
('Jone', 'Doe', 99; 
postgres(# ^C
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
('Jane', 'Doe', 99);
ERROR:  insert or update on table "employees" violates foreign key constraint "fk_employee_department"
DETAIL:  Key (dept_id)=(99) is not present in table "departments".
postgres=# DELETE FROM departments WHERE dept_id = 1;
ERROR:  update or delete on table "departments" violates foreign key constraint "fk_employee_department" on table "employees"
DETAIL:  Key (dept_id)=(1) is still referenced from table "employees".
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 1
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
emp_id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
dept_id INTEGER REFERENCES departments(dept_id) ON DELETE NULL   
);
ERROR:  syntax error at or near "NULL"
LINE 5: ...pt_id INTEGER REFERENCES departments(dept_id) ON DELETE NULL
                                                                   ^
postgres=# CREATE TABLE employees (
emp_id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET NULL
);
CREATE TABLE
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
('John', 'Smith', 1);
ERROR:  insert or update on table "employees" violates foreign key constraint "employees_dept_id_fkey"
DETAIL:  Key (dept_id)=(1) is not present in table "departments".
postgres=# INSERT INTO departments (dept_name, location) VALUES
('Engineering', 'Building A'),
('Marketing', 'Building B'),
('HR', 'Building C');
INSERT 0 3
postgres=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
postgres=# SELECT * FROM departments;
 dept_id |  dept_name  |  location  
---------+-------------+------------
       2 | Marketing   | Building B
       3 | HR          | Building C
       4 | Engineering | Building A
       5 | Marketing   | Building B
       6 | HR          | Building C
(5 rows)

postgres=# SELECT * FROM employees;
 emp_id | first_name | last_name | dept_id 
--------+------------+-----------+---------
(0 rows)

postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
('John', 'Smith', 1);
ERROR:  insert or update on table "employees" violates foreign key constraint "employees_dept_id_fkey"
DETAIL:  Key (dept_id)=(1) is not present in table "departments".
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
emp_id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
dept_id INTEGER REFERENCES departments(dept_id) ON UPDATE CASCADE 
);
CREATE TABLE
postgres=# UPDATE departments SET dept_id = 100 WHERE dept_id = 1;
UPDATE 0
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
emp_id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE
postgres=# CREATE TABLE users (
postgres(# user_id SERIAL PRIMARY KEY,
postgres(# username VARCHAR(50) UNIQUE NOT NULL,
postgres(# email VARCHAR(50) UNIQUE NOT NULL,
postgres(# created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE user_profiles (
postgres(# profile_id SERIAL PRIMARY KEY,
postgres(# user_id INTEGER UNIQUE NOT NULL,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# bio TEXT,
postgres(# profile_picture_url VARCHAR(255),
postgres(# FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=# INSERT INTO users (username, email) VALUES ('johndoe', 'john@example.com');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
postgres-# (1, 'John', 'Doe', 'Software developer passionate about databases');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
(1, 'Jane', 'Smith');
ERROR:  INSERT has more target columns than expressions
LINE 1: ...TO user_profiles (user_id, first_name, last_name, bio) VALUE...
                                                             ^
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name) VALUES
(1, 'Jane', 'Smith');
ERROR:  duplicate key value violates unique constraint "user_profiles_user_id_key"
DETAIL:  Key (user_id)=(1) already exists.
postgres=# DROP TABLE departments;
ERROR:  cannot drop table departments because other objects depend on it
DETAIL:  constraint employees_dept_id_fkey on table employees depends on table departments
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
postgres=# DROP TABLE departments CASCADE;
NOTICE:  drop cascades to constraint employees_dept_id_fkey on table employees
DROP TABLE
postgres=# \dt
                List of relations
 Schema |        Name         | Type  |  Owner   
--------+---------------------+-------+----------
 public | employees           | table | postgres
 public | orders              | table | postgres
 public | university_students | table | postgres
 public | user_profiles       | table | postgres
 public | users               | table | postgres
(5 rows)

postgres=# DROP TABLE employees;
DROP TABLE
postgres=# DROP TABLE orders;
DROP TABLE
postgres=# DROP TABLE users;
ERROR:  cannot drop table users because other objects depend on it
DETAIL:  constraint user_profiles_user_id_fkey on table user_profiles depends on table users
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
postgres=# DROP TABLE users CASCADE;
NOTICE:  drop cascades to constraint user_profiles_user_id_fkey on table user_profiles
DROP TABLE
postgres=# DROP TABLE user_profiles;
DROP TABLE
postgres=# \dt
                List of relations
 Schema |        Name         | Type  |  Owner   
--------+---------------------+-------+----------
 public | university_students | table | postgres
(1 row)

postgres=# DROP TABLE university_students 
postgres-# ;
DROP TABLE
postgres=# \dt
Did not find any relations.
postgres=# CREATE TABLE departments (
postgres(# dept_id SERIAL PRIMARY KEY,
postgres(# dept_name VARCHAR(100) NOT NULL,
postgres(# manager_name VARCHAR(100),
postgres(# budget DECIMAL(10, 2)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE employees (
postgres(# emp_id PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# position VARCHAR(100)
postgres(# ,
postgres(# salary DECIMAL(10, 2),
postgres(# hire_date DATE DEFAULT CURRENT_DATE,
postgres(# dept_id INTEGER NOT NULL,
postgres(# FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
postgres(# );
ERROR:  syntax error at or near "PRIMARY"
LINE 2: emp_id PRIMARY KEY,
               ^
postgres=# CREATE TABLE employees (
emp_id SERIAL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
position VARCHAR(100)
,
salary DECIMAL(10, 2),
hire_date DATE DEFAULT CURRENT_DATE,
dept_id INTEGER NOT NULL,
FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
);
CREATE TABLE
postgres=# INSERT INTO departments (dept_name, manager_name, budget) VALUES
postgres-# ('Engineering', 'Alice Johnson', 500000.00),
postgres-# ('Marketing', 'Bob Wilson', 200000.00);
INSERT 0 2
postgres=# INSERT INTO employees (first_name, last_name, position, salary, dept_id) VALUES
postgres-# ('John', 'Smith', 'Software Engineer', 75000.00, 1),
postgres-# ('Jane', 'Doe', 'Senior Developer', 85000.00, 1),
postgres-# ('Mike', 'Brown', 'DevOps Engineer', 80000.00, 1),
postgres-# ('Sarah', 'Davis', 'Marketing Specialist', 55000.00, 2);
INSERT 0 4
postgres=# SELECT d.dept_name, e.first_name, e.last_name, e.position
postgres-# FROM departments d
postgres-# JOIN employees e ON d.dept_id = e.dept_id
postgres-# ORDER BY d.dept_name, e.last_name;
  dept_name  | first_name | last_name |       position       
-------------+------------+-----------+----------------------
 Engineering | Mike       | Brown     | DevOps Engineer
 Engineering | Jane       | Doe       | Senior Developer
 Engineering | John       | Smith     | Software Engineer
 Marketing   | Sarah      | Davis     | Marketing Specialist
(4 rows)

postgres=# SELECT d.dept_name, d.manager_name, d.budget, e.first_name, e.last_name, e.position, e.salary
postgres-# FROM departments d
postgres-# JOIN employees e ON d.dept_id = e.dept_id
postgres-# ORDER BY d.dept_name, e.last_name;
  dept_name  | manager_name  |  budget   | first_name | last_name |       position       |  salary  
-------------+---------------+-----------+------------+-----------+----------------------+----------
 Engineering | Alice Johnson | 500000.00 | Mike       | Brown     | DevOps Engineer      | 80000.00
 Engineering | Alice Johnson | 500000.00 | Jane       | Doe       | Senior Developer     | 85000.00
 Engineering | Alice Johnson | 500000.00 | John       | Smith     | Software Engineer    | 75000.00
 Marketing   | Bob Wilson    | 200000.00 | Sarah      | Davis     | Marketing Specialist | 55000.00
(4 rows)

postgres=# \dt
            List of relations
 Schema |    Name     | Type  |  Owner   
--------+-------------+-------+----------
 public | departments | table | postgres
 public | employees   | table | postgres
(2 rows)

postgres=# CREATE TABLE students (
postgres(# student_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# email VARCHAR(100) UNIQUE,
postgres(# enrollment_date DATE DEFAULT CURRENT_DATE
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE courses (
postgres(# course_id SERIAL PRIMARY KEY,
postgres(# course_code VARCHAR(10) UNIQUE NOT NULL,
postgres(# course_name VARCHAR(100) NOT NULL,
postgres(# credits INTEGER NOT NULL,
postgres(# instructor VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE student_enrollments (
postgres(# enrollment_id SERIAL PRIMARY KEY,
postgres(# student_id INTEGER NOT NULL,
postgres(# course_id INTEGER NOT NULL,
postgres(# enrollment_date DATE DEFAULT CURRENT_DATE,
postgres(# grade CHAR(2),
postgres(# 
postgres(# FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
postgres(# FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
postgres(# 
postgres(# UNIQUE(student_id, course_id)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO (first_name, last_name, email) VALUES
postgres-# ('Alice', 'Johnson', 'alice@university.edu'),
postgres-# ('Bob', 'Smith', 'bob@university.edu'),
postgres-# 
postgres-# ('Carol', 'Wilson', 'carol@university.edu');
ERROR:  syntax error at or near "("
LINE 1: INSERT INTO (first_name, last_name, email) VALUES
                    ^
postgres=# INSERT INTO students (first_name, last_name, email) VALUES
('Alice', 'Johnson', 'alice@university.edu'),
('Bob', 'Smith', 'bob@university.edu'),
('Carol', 'Wilson', 'carol@university.edu');
INSERT 0 3
postgres=# INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
postgres-# ('CS101', 'Introduction to Programming', 3, 'Dr. Brown'),
postgres-# ('CS201', 'Data Structures', 4, 'Dr. Davis'),
postgres-# ('MATH101', 'Calculus I', 4, 'Dr. Wilson');
INSERT 0 3
postgres=# INSERT INTO stundet_enrollments (student_id, course_id, grade) VALUES
postgres-# (1, 1, 'A'),
postgres-# (1, 2, 'B+',)
postgres-# ^C
postgres=# INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
postgres-# (1, 1, 'A'),
postgres-# (1, 2, 'B+'),
postgres-# (2, 1, 'A-'),
postgres-# (2, 3, 'B',)
postgres-# 
postgres-# ,
postgres-# (3, 2, 'A'),
postgres-# (3, 3, 'A-)';
postgres(# 
postgres(# ;
postgres(# ;
postgres(# INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
postgres-# (1, 1, 'A'),
postgres-# (1, 2, 'B+'),
postgres-# (2, 1, 'A-'),
postgres(# (2, 3, 'B'),
postgres(# (3, 2, 'A'),
postgres(# (3, 3, 'A-');
postgres(# 
postgres(# ^C
postgres=# INSERT INTO student_enrollments (student_id, course_id) VALUES
postgres-# (1, 1, 'A'),
postgres-# (1, 2, 'B+'),
postgres-# (2, 1, 'A-'),
postgres-# (2, 3, 'B'),
postgres-# (3, 2, 'A'),
postgres-# (3, 3, 'A-');
ERROR:  INSERT has more expressions than target columns
LINE 2: (1, 1, 'A'),
               ^
postgres=# INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
(1, 1, 'A'),
(1, 2, 'B+'),
(2, 1, 'A-'),
(2, 3, 'B'),
(3, 2, 'A'),
(3, 3, 'A-');
INSERT 0 6
postgres=# SELECT
postgres-# s.first_name || ' ' || s.last_name AS student_name
postgres-# ^C
postgres=# SELECT
postgres-# s.first_name || ' ' || s.last_name AS student_name,
postgres-# c.course_code,
postgres-# c.course_name,
postgres-# se.grade,
postgres-# se.enrollment_date<
postgres-# ^C
postgres=# SELECT
postgres-#     s.first_name || ' ' || s.last_name AS student_name,
postgres-#     c.course_code,
postgres-#     c.course_name,
postgres-#     se.grade,
postgres-#     se.enrollment_date,
postgres-# FROM
postgres-# ;
ERROR:  syntax error at or near "FROM"
LINE 7: FROM
        ^
postgres=# SELECT
    s.first_name || ' ' || s.last_name AS student_name,
    c.course_code,
    c.course_name,
    se.grade,
    se.enrollment_date 
FROM students s
postgres-# SELECT
postgres-#     s.first_name || ' ' || s.last_name AS student_name,
postgres-#     c.course_code,
postgres-#     c.course_name,
postgres-#     se.grade,
postgres-#     se.enrollment_date
postgres-# FROM students s
postgres-# JOIN student_enrollments se ON s.student_id = se.student_id
postgres-# JOIN courses c ON se.course_id = c.course_id
postgres-# ORDER BY s.last_name, c.course_code;
ERROR:  syntax error at or near "SELECT"
LINE 8: SELECT
        ^
postgres=# SELECT
    s.first_name || ' ' || s.last_name AS student_name,
    c.course_code,
    c.course_name,
    se.grade,
    se.enrollment_date
FROM students s
SELECT
    s.first_name || ' ' || s.last_name AS student_name,
    c.course_code,
    c.course_name,
    se.grade,
    se.enrollment_date
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
ORDER BY s.last_name, c.course_code;
ERROR:  syntax error at or near "SELECT"
LINE 8: SELECT
        ^
postgres=# SELECT
s.first_name || ' ' || s.last_name AS student_name,
c.course_code,
c.course_name,
se.grade,
se.enrollment_date
FROM students s
SELECT
s.first_name || ' ' || s.last_name AS student_name,
   ^C.course_code,
    c.course_name,
    se.grade,
    se.enrollment_date
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
ORDER BY s.last_name, c.course_code;
postgres=# SELECT
postgres-#     s.first_name || ' ' || s.last_name AS student_name
postgres-#     c.course_code,
postgres-#     c.course_name,
postgres-#     se.grade,
postgres-#     se.enrollment_date,
postgres-# FROM students s
postgres-# JOIN student_enrollments se ON s.student_id = se.student_id
postgres-# JOIN courses c ON se.courses_id = c.course_id
postgres-# ORDER BY s.last_name, c.course_code;
ERROR:  syntax error at or near "c"
LINE 3:     c.course_code,
            ^
postgres=# SELECT
    s.first_name || ' ' || s.last_name AS student_name,
    c.course_code,
    c.course_name,
    se.grade,
    se.enrollment_date,
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.courses_id = c.course_id
ORDER BY s.last_name, c.course_code;
ERROR:  syntax error at or near "FROM"
LINE 7: FROM students s
        ^
postgres=# SELECT
    s.first_name || ' ' || s.last_name AS student_name,
    c.course_code,
    c.course_name,
    se.grade,
    se.enrollment_date 
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.courses_id = c.course_id
ORDER BY s.last_name, c.course_code;
ERROR:  column se.courses_id does not exist
LINE 9: JOIN courses c ON se.courses_id = c.course_id
                          ^
HINT:  Perhaps you meant to reference the column "se.course_id".
postgres=# SELECT
    s.first_name || ' ' || s.last_name AS student_name,
    c.course_code,
    c.course_name,
    se.grade,
    se.enrollment_date
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
ORDER BY s.last_name, c.course_code;
 student_name  | course_code |         course_name         | grade | enrollment_date 
---------------+-------------+-----------------------------+-------+-----------------
 Alice Johnson | CS101       | Introduction to Programming | A     | 2025-09-02
 Alice Johnson | CS201       | Data Structures             | B+    | 2025-09-02
 Bob Smith     | CS101       | Introduction to Programming | A-    | 2025-09-02
 Bob Smith     | MATH101     | Calculus I                  | B     | 2025-09-02
 Carol Wilson  | CS201       | Data Structures             | A     | 2025-09-02
 Carol Wilson  | MATH101     | Calculus I                  | A-    | 2025-09-02
(6 rows)
